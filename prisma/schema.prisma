// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PASTOR
  MEMBER
}

enum DonationType {
  TITHE
  OFFERING
  SEED
  OTHER
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  phone         String?         @unique
  address       String?
  role          Role            @default(MEMBER)
  sermons       Sermon[]
  departmentId  String? 
  department    Department?     @relation(fields: [departmentId], references: [id])
  donations     Donation[]
  attendances   Attendance[]
  prayerRequests PrayerRequest[]
  testimonies   Testimony[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Sermon {
  id              String   @id @default(cuid())
  title           String
  description     String?
  preacher        String
  datePreached    DateTime
  category        String?
  scriptureText   String?
  audioUrl        String?
  videoUrl        String?
  thumbnailUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  uploadedById    String?
  uploadedBy      User?     @relation(fields: [uploadedById], references: [id])
}


model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  members   User[]
  createdAt DateTime @default(now())
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  attendances Attendance[]
  createdAt   DateTime      @default(now())
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // prevent double attendance records
}

model Donation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  type        DonationType
  description String?
  date        DateTime @default(now())
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  message     String
  createdBy   String
  createdAt   DateTime @default(now())
}

model PrayerRequest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  isAnswered Boolean  @default(false)
  createdAt DateTime  @default(now())
}

model Testimony {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  isApproved Boolean  @default(false)
  createdAt DateTime  @default(now())
}
